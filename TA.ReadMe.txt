-------------------------------v1.0 串行 --Tomoyo_will_pass------------------------
#采用串行结构，一个周期只执行一条指令的IF，ID，EX，MA，WB，
#以inst为基类，R_Type,I_Tyoe,U_Type,S_Type为派生类，此下再派生出各个指令的类
#IF和ID独立于类之外，EX，MA，WB作为类的内置函数
#在ID阶段解析出指令内容，并返回对应指令的类的指针，函数执行结束delete指针
评测结果：
用时4780ms，内存7312kb
//由于采用指针法，每阶段delete，有点耗时；不太了解派生类虚函数的知识，所以构思有点慢
//这一版本中我自认为收获最大的就是debug能力，现在习惯于先整理思路（道具：小黄鸭），思考是否有而可能出现特殊情况或者思路是否有致命错误，并肉眼调试，顺便看看是否有该注释掉的没注释掉，是否需要调换顺序等；这一步基本能发现大部分的bug，其次用寄存器输出看是哪一指令出了问题，定位是哪个指令后就可以大大减轻调试压力，不过虽然这一版通过了oj，但是在之后重构的时候发现还是有一些bug的，虽然没有影响实际运行效果
-------------------------------v2.0 并行 --Tomoyo_will_pass_twice--------------------
#将IF，ID，EX，MA，WB五个步骤设计成类，通过调用类的函数实现指令的执行
#各个类之间的交接结构称为pass_oj，是一个数据结构体,包含所有需要的数据
#五个步骤之间有暂存体，步骤运行结束后将会把结果赋到中间的暂存体中:IF--if_end--ID--id_end--EX--ex_end--MA--ma_end--WB
#这一版本没有采用分支预测，遇到如Branch，Load之类的指令时一般是令IF等4个时间，再读入下一条指令#通知信息由forwarding改变而来，具体实现：创建一个类RD_Renew，类中含有一个rd--rd_value的组。因除去load以外其余更改寄存器的指令都会再ex计算出结果，故在整个五级流水运行结束时将ex_end的运算结果上传至RD_Renew,之后对当前的if_end进行更新，下一轮进行时在IF，ID中再次进行更新；这样一条指令的ex_end的结果只要在RD_Renew中留存一轮即可，之后被下一个结果覆盖，或是置零。
评测结果：
用时5368ms，内存7304kb
//写出这个版本消耗了我四五天的时间，原因在于在思考不太深入，细节处没有考虑清楚时就开始由串行直接改并行，bug太多且不易调试（并行），好在及时改正，再次重构后再添加功能，大约一天的时间就完成了。
-------------------------------v3.0 并行 --Parallel_Processing_RISCV-----------------
#考虑到上一版本虽然能通过，但是IF改动rs_value不符合逻辑，所以最后还是改为forwarding，并添加了分支预测。
#forwarding :除load暂停1时刻，JALR，AUIPC暂停4时刻外其余不暂停，且均在ex和ma阶段返回给ex自己的计算结果，无结果则用0覆盖；
#分支预测采用二级自适应算法，用数组记录最近四次历史记录，16种历史记录各自对应0123四种状态，一轮结束后对预测结果进行反馈，修正状态量和历史记录，预测结果较好。其中需注意防止溢出，否则预测结果会因越界访问返回值的变化而变化
评测结果：
未加分支预测：
用时9472ms 内存7308kb
添加分支预测：
用时8068ms 内存7636kb

附：预测结果
文件名		计算结果	预测成功率	预测成功次数	总预测次数
array_test1 	123	54.5455% 		12		22
array_test2 	43	50%		13 		26
basicopt1 	88	99.1943%		153889		155139
bulgarian 	159	94.5701%		67611		71493
expr 		58	72.0721%		80		111
gcd 		178	62.5%		75		120
hanoi 		20	98.2815%		17157		17457
lvalue2 		175	66.6667%		4		6
magic 		106	82.7197%		56141		67869
manyarguments 	40	80%		8		10
multiarray 	115	53.0864%		86		162
naive 		94	//
pi 		137	85.345%  		34100754	39956380
qsort 		105	94.5437%		189130		200045
queens 		171	80.9611%		62434		77116
statement_test 	50	63.3663%		128		202
superloop	134	95.8874%		417136		435027
tak 		186	78.5353%		47623		60639